@using OpenOrderFramework.Extensions
@model IEnumerable<OpenOrderFramework.ViewModels.ItemViewModel>

@{ 
    ViewBag.Title = "Store";
    var catagoryData = (IEnumerable<OpenOrderFramework.Models.Catagorie>)ViewData["Catagories"];
    var catagoryMainParents = catagoryData.Where(cty => cty.Parent == null);
}

<script>
    // flatten object by concatting values
    function concatValues( obj ) {
        var value = '';
        for ( var prop in obj ) {
            value += obj[ prop ];
        }
        return value;
    }

    $(document).ready(function () {
        // store filter for each group
        var filters = {};

        // init Isotope
        var $grid = $('.isogrid').isotope({
            itemSelector: '.store-item',
            layoutMode: 'fitRows'
        });

        // filter functions
        var filterFns = {
            priceUnder20: function () {
                var number = $(this).find('.price').text();
                return parseInt(number, 10) < 20;
            },
            priceUnder150: function () {
                var number = $(this).find('.price').text();
                return parseInt(number, 10) < 150;
            }
        };

        // bind filter button click
        $('.filters-button-group').on('click', 'button', function () {
            var filterValue = $(this).attr('data-filter');

            if (filterValue == "catagory") {
                var catagorySelected = $(this).attr('data-catagoryname');

                // set filter for Isotope
                $grid.isotope({ filter: catagorySelected });
            } else {
                // use filterFn if matches value
                filterValue = filterFns[filterValue] || filterValue;
                $grid.isotope({ filter: filterValue });
            }
        });

        // change is-checked class on buttons
        $('.button-group').each(function (i, buttonGroup) {
            var $buttonGroup = $(buttonGroup);
            $buttonGroup.on('click', 'button', function () {
                $buttonGroup.find('.is-checked').removeClass('is-checked');
                $(this).addClass('is-checked');
            });
        });
    });
</script>

<h1>What kind of adventure are we having today?</h1>

<div class="button-group filters-button-group">
    <button class="button is-checked" data-filter="*">All</button>
    @*<button class="button" data-filter="priceUnder20">Under $20</button>
    <button class="button" data-filter="priceUnder150">Under $150</button>*@

    @foreach (var catagory in catagoryMainParents) {
        <button class="button" data-filter="catagory" data-catagoryname=".@catagory.Name">@catagory.Name.CleanString()</button>
    }
</div>

<div class="isogrid">
    @foreach(var item in Model) {
        <a href="@Url.Action("Details", "Details", new { id = item.ItemID })" class="store-item @item.Catagories" >            
            <img src="~/Content/Imgs/SDthumb.JPG" class="item-thumb" />
            @if (item.Thumbnail != null) { <img class="item-thumb" src="@item.Thumbnail.ItemPictureUrl" /> }   
            <div class="item-spec">
                <h3>@item.Name</h3>
                <p class="price">$ @item.Price</p>
            </div>
        </a>
    }
</div>

<style>
    * {
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }

    .item-thumb {
        min-height: 90px;
        min-width: 90px;
        max-height: 90px;
        max-width: 90px;
        float: left;
    }
    .item-spec {
        padding-left: 20px;
        padding-right: 10px;
        float: right;
    }

    h1 {
        text-align: center;
        margin-bottom: 25px;
    }
    h3 {
        padding-left: 5px;
        border-left: 5px solid #222;
        font-weight: bold;
        line-height: 19px;
    }
    p {
        font-family: 'Open Sans';
    }
    .isogrid a:hover { 
        background: rgba(0, 0, 0, .7);
        color: #ED5672;
        border: none;
    }
    a:hover h3 {
        border-color: #FFF;
    }

    body {
        font-family: sans-serif;
    }

    /* ---- button ---- */
    .button {
        display: inline-block;
        padding: 7px 15px;
        margin-bottom: 10px;
        background: rgba(0, 0, 0, .65);
        border: none;
        border-radius: 7px;
        /*background-image: linear-gradient( to bottom, hsla(0, 0%, 0%, 0), hsla(0, 0%, 0%, 0.2) );*/
        color: #FFF;
        font-family: 'Open Sans';
        font-size: 16px;
        /*text-shadow: 0 1px white;*/
        cursor: pointer;
    }

        .button:hover {
            background-color: rgba(210, 217, 216, .75);
            /*text-shadow: 0 1px hsla(0, 0%, 100%, 0.5);*/
            color: #222;
        }

        /*.button:active,
        .button.is-checked {
            background-color: #28F;
        }*/

        .button.is-checked {
            color: #ED5672;
            /*text-shadow: 0 -1px hsla(0, 0%, 0%, 0.8);*/
        }

        /*.button:active {
            box-shadow: inset 0 1px 10px hsla(0, 0%, 0%, 0.8);
        }*/

    /* ---- button-group ---- */
    .button-group:after {
        content: '';
        display: block;
        clear: both;
    }

    .button-group .button {
        float: left;
        border-radius: 0;
        margin-left: 0;
        margin-right: 1px;
    }

        /*.button-group .button:first-child {
            border-radius: 0.5em 0 0 0.5em;
        }

        .button-group .button:last-child {
            border-radius: 0 0.5em 0.5em 0;
        }*/

    /* ---- isotope ---- */
    .isogrid {
        border: 1px solid #FFF;
    }

        /* clear fix */
        .isogrid:after {
            content: '';
            display: block;
            clear: both;
        }

    /* ---- .element-item ---- */
    .store-item {
        position: relative;
        float: left;
        /*width: 200px;
        height: 100px;*/
        margin: 5px;
        padding: 10px;
        background: rgba(225, 225, 225, .55);
        color: #262524;
    }

        .store-item > * {
            margin: 0;
        }

        .store-item .name {
            position: absolute;
            left: 10px;
            top: 60px;
            text-transform: none;
            letter-spacing: 0;
            font-size: 12px;
            font-weight: normal;
        }
</style>